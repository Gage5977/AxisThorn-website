version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: axis-postgres
    environment:
      POSTGRES_USER: axis
      POSTGRES_PASSWORD: ${DB_PASSWORD:-axis-dev-password}
      POSTGRES_DB: axisthorn
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U axis"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: axis-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: axis-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://axis:${DB_PASSWORD:-axis-dev-password}@postgres:5432/axisthorn
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://axisthorn.com}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./prisma/migrations:/app/prisma/migrations:ro
    command: >
      sh -c "
        npx prisma migrate deploy &&
        node server.js
      "
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: axis-nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data: