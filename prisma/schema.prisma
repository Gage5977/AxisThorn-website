// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  apiKey    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices  Invoice[]
  customers Customer[]
  products  Product[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  address   Json?
  taxId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@map("customers")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  sku         String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]

  @@map("products")
}

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  customerId     String
  subtotal       Float         @default(0)
  discount       Float         @default(0)
  discountType   DiscountType  @default(FIXED)
  tax            Float         @default(0)
  taxRate        Float         @default(0)
  total          Float         @default(0)
  amountDue      Float         @default(0)
  amountPaid     Float         @default(0)
  status         InvoiceStatus @default(DRAFT)
  paymentStatus  PaymentStatus @default(UNPAID)
  notes          String?
  terms          String?
  dueDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer     @relation(fields: [customerId], references: [id])
  items    InvoiceItem[]
  payments Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  order       Int     @default(0)

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id              String        @id @default(cuid())
  invoiceId       String
  amount          Float
  currency        String        @default("USD")
  method          PaymentMethod @default(STRIPE)
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  UNPAID
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

enum PaymentMethod {
  STRIPE
  BANK_TRANSFER
  CHECK
  CASH
  OTHER
}