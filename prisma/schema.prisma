// Prisma Schema for Axis Thorn Website

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  company       String?
  passwordHash  String
  passwordSalt  String
  role          Role      @default(CLIENT)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sessions      Session[]
  documents     Document[]
  invoices      Invoice[]
  notes         Note[]
  activities    Activity[]
}

// Session model for JWT refresh tokens
model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Document model
model Document {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String
  size        Int
  url         String
  uploadedAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Invoice model
model Invoice {
  id          String        @id @default(cuid())
  userId      String
  invoiceNumber String      @unique
  amount      Float
  currency    String        @default("usd")
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
}

// Note model for internal admin notes
model Note {
  id          String   @id @default(cuid())
  userId      String   // The client this note is about
  authorId    String   // The admin who wrote the note
  content     String   @db.Text
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Activity log model
model Activity {
  id          String   @id @default(cuid())
  userId      String?
  type        String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Password reset tokens
model PasswordReset {
  id          String   @id @default(cuid())
  email       String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([email])
}

// Enums
enum Role {
  CLIENT
  ADMIN
  SUPERADMIN
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}